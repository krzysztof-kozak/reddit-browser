{"version":3,"sources":["Post.js","PostList.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Post","title","url","author","className","href","target","rel","PostList","posts","subtitle","map","post","key","Search","useState","searchQuery","setSearchQuery","postLimit","setPostLimit","sortBy","setSortBy","setPosts","pages","setPages","error","setError","setNumberOfPostsFetched","setTitle","subTitle","setSubTitle","resetCount","fetchPosts","a","prevPage","nextPage","count","fetch","response","status","json","responseJson","parseResponses","setPagination","data","children","child","permalink","subredditName","subreddit_name_prefixed","id","before","after","onSubmit","e","preventDefault","value","replace","toLowerCase","search","placeholder","onChange","htmlFor","name","type","onClick","isRun","prev","currentCount","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.13b3a185.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Post = ({ title, url, author }) => {\r\n  return (\r\n    <li className='list__item'>\r\n      <a className='link' href={`https://www.reddit.com${url}`} target='_blank' rel='noopener noreferrer'>\r\n        {title}\r\n      </a>\r\n      <p className='author'>\r\n        posted by <strong>{author}</strong>\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from './Post';\r\n\r\nconst PostList = ({ posts, title, subtitle }) => {\r\n  if (posts) {\r\n    return (\r\n      <>\r\n        <h2 className='subreddit-title'>\r\n          Posts from <b>r/{title}</b>\r\n        </h2>\r\n        <p className='list-info'>\r\n          Sorted by: <b>{subtitle}</b>{' '}\r\n        </p>\r\n        <ul className='list'>\r\n          {posts.map((post) => (\r\n            <Post title={post.title} url={post.url} author={post.author} key={post.key} />\r\n          ))}\r\n        </ul>\r\n      </>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default PostList;\r\n","import React, { useState } from \"react\";\r\nimport PostList from \"./PostList\";\r\n\r\nconst Search = () => {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [postLimit, setPostLimit] = useState(10);\r\n  const [sortBy, setSortBy] = useState(\"new\");\r\n  const [posts, setPosts] = useState(false);\r\n  const [pages, setPages] = useState({});\r\n  const [error, setError] = useState(null);\r\n  const [numberOfPostsFetched, setNumberOfPostsFetched] = useState(0);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [subTitle, setSubTitle] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    resetCount();\r\n    setSubTitle(e.target.sortBy.value.replace(/\\s+/g, \"\").toLowerCase());\r\n    setTitle(e.target.search.value);\r\n\r\n    if (searchQuery) {\r\n      fetchPosts();\r\n    }\r\n  };\r\n\r\n  const resetCount = () => {\r\n    setNumberOfPostsFetched(0);\r\n  };\r\n\r\n  const handlePostLimitChange = (e) => {\r\n    setPostLimit(e.target.value);\r\n  };\r\n\r\n  const handleSortByChange = (e) => {\r\n    setSortBy(e.target.value);\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    let isRun = true;\r\n    setNumberOfPostsFetched((prev) => {\r\n      if (isRun) {\r\n        isRun = !isRun;\r\n        fetchPosts(null, pages.after, prev + posts.length);\r\n      }\r\n      return prev + posts.length;\r\n    });\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    let isRun = true;\r\n    setNumberOfPostsFetched((prev) => {\r\n      const currentCount = prev - posts.length > 0 ? prev - posts.length : 0;\r\n      if (isRun) {\r\n        isRun = !isRun;\r\n        fetchPosts(pages.before, null, currentCount);\r\n      }\r\n      return currentCount;\r\n    });\r\n  };\r\n\r\n  const fetchPosts = async (prevPage = null, nextPage = null, count = 0) => {\r\n    // if (count === 0) {\r\n    //   prevPage = null;\r\n    // }\r\n    const response = await fetch(\r\n      `https://www.reddit.com/r/${searchQuery}/${sortBy}.json?limit=${postLimit}&count=${count}${\r\n        nextPage ? `&after=${nextPage}` : \"\"\r\n      }${prevPage ? `&before=${prevPage}` : \"\"}`\r\n    );\r\n\r\n    if (response.status === 404) {\r\n      setError(\r\n        `I couldn't find this subreddit: https://www.reddit.com/r/${searchQuery}`\r\n      );\r\n      setPosts(false);\r\n    } else {\r\n      const responseJson = await response.json();\r\n      setError(null);\r\n\r\n      parseResponses(responseJson);\r\n      setPagination(responseJson);\r\n    }\r\n  };\r\n\r\n  const parseResponses = (responseJson) => {\r\n    const posts = responseJson.data.children\r\n\r\n      //Sticked posts do not adhere to the post per page limit. Filtering them out is not ideal, but I couldn't find a better solution.\r\n      // .filter((post) => post.data.stickied === false)\r\n      .map((child) => {\r\n        return {\r\n          title: child.data.title,\r\n          url: child.data.permalink,\r\n          subredditName: child.data.subreddit_name_prefixed,\r\n          author: child.data.author,\r\n          key: child.data.id,\r\n        };\r\n      });\r\n    setPosts(posts);\r\n  };\r\n\r\n  const setPagination = (responseJson) => {\r\n    setPages({\r\n      before: responseJson.data.before,\r\n      after: responseJson.data.after,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <h1 className=\"form__title\">Reddit App</h1>\r\n\r\n        <p className=\"search-wrapper\">\r\n          <label className=\"form__label form__label--main\">reddit/r</label>\r\n          <input\r\n            className=\"form__input\"\r\n            id=\"search\"\r\n            placeholder=\"e.g reactjs\"\r\n            onChange={(e) => setSearchQuery(e.target.value.replace(/\\s+/g, \"\"))}\r\n          ></input>\r\n        </p>\r\n\r\n        <p className=\"search-wrapper\">\r\n          <label className=\"form__label\" htmlFor=\"postLimit\">\r\n            posts per page\r\n          </label>\r\n          <select\r\n            className=\"form__select\"\r\n            id=\"postLimit\"\r\n            name=\"postLimit\"\r\n            onChange={handlePostLimitChange}\r\n          >\r\n            <option value={10}>10</option>\r\n            <option value={20}>20</option>\r\n            <option value={30}>30</option>\r\n          </select>\r\n        </p>\r\n\r\n        <p className=\"search-wrapper\">\r\n          <label className=\"form__label\" htmlFor=\"sortBy\">\r\n            sort posts by\r\n          </label>\r\n          <select\r\n            className=\"form__select\"\r\n            id=\"sortBy\"\r\n            name=\"sortBy\"\r\n            onChange={handleSortByChange}\r\n            value={sortBy}\r\n          >\r\n            <option value=\"new\">new</option>\r\n            <option value=\"top\">top</option>\r\n            <option value=\"hot\">hot</option>\r\n            <option value=\"rising\">rising</option>\r\n          </select>\r\n        </p>\r\n\r\n        <button className=\"form__button\" type=\"submit\">\r\n          search\r\n        </button>\r\n\r\n        {error ? <p className=\"error\">{error}</p> : null}\r\n      </form>\r\n\r\n      <PostList posts={posts} title={title} subtitle={subTitle} />\r\n      <div className=\"button-wrapper\">\r\n        <button\r\n          className={posts ? \"list__button\" : \"hidden\"}\r\n          onClick={handlePrevPage}\r\n        >\r\n          Prev Page\r\n        </button>\r\n        <button\r\n          className={posts ? \"list__button\" : \"hidden\"}\r\n          onClick={handleNextPage}\r\n        >\r\n          Next Page\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\nimport Search from './Search';\n\nfunction App() {\n  return <Search />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}